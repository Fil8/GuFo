#!/usr/bin/env python3.6

import os, glob
import sys
import logging
import time

import gufo
from scavengers import gPlay, starSub, momPlay, tPlay, cubePlay, momPlot, specPlay
from scavengers import gPlayMp, bptPlot, vorPlay, ancels, ancelsPlot,linePlay
from scavengers import util as pretty

import argparse
from  argparse import ArgumentParser
import textwrap as _textwrap

import pkg_resources
try:
    __version__ = pkg_resources.require("gufo")[0].version
except pkg_resources.DistributionNotFound:
    __version__ = "dev"



gp = gPlay.gplay()
ss = starSub.starsub()
mom = momPlay.momplay()
mPl = momPlot.MOMplot()
lP=linePlay.lineplay()
tP = tPlay.tplay()
cP = cubePlay.cubeplay()
bpt = bptPlot.BPTplot()
vor = vorPlay.vorplay()
aPl = ancelsPlot.ancelsplot()

class MultilineFormatter(argparse.HelpFormatter):
    '''
    Modules to format arguments parsed from terminal
    '''

    def _fill_text(self, text, width, indent):
        '''
        fills in missing spaces when arguments are parsed on multiple lines
        '''
    
        text = self._whitespace_matcher.sub(' ', text).strip()
        paragraphs = text.split('|n ')
        multiline_text = ''
        for paragraph in paragraphs:
            formatted_paragraph = _textwrap.fill(paragraph, width, initial_indent=indent, subsequent_indent=indent) + '\n\n'
            multiline_text = multiline_text + formatted_paragraph
        return multiline_text

def outFunction ():
    '''
    prints out main commands of GaNGiaLF

    called by GaNGiaLF help
    '''
    
    print ("""\nRun one of the following commands:\n
    gufo\t\t-gd <configFileName>\tgenerate config file in working directory
    gufo\t\t-c  <configFileName>\trun GuFo with modules enabled from config file
    gufo -stS\t\t-c  <configFileName>\tmake line cube from PPXF outputs
    gufo -gp\t\t-c  <configFileName>\trun fit with parameters from config file and lineList file (outdated)
    gufo -gpMp\t\t-c  <configFileName>\trun fit on multiprocess with parameters from config file and lineList file
    gufo -gPl\t\t-c  <configFileName>\tplot fit results for each bin
    gufo -mom\t\t-c  <configFileName>\tmake moment maps of fitted lines
    gufo -momPl\t\t-c  <configFileName>\t plot moment maps from fits files
    gufo -cBl\t\t-c  <configFileName>\t make cubelets of chosen lines
    gufo -res\t\t-c  <configFileName>\tmake residual maps for each fitted line
    gufo -lr\t\t-c  <configFileName>\testimate lineRatios, make lineRatio maps and BPT plots of fitted lines
    gufo -clT\t\t-c  <configFileName>\tclean table leaving only fit results
    gufo -vor\t\t-c  <configFileName>\tVoronoi binning of output of PPXF (star subtracted datacube) 
    gufo -af\t\t-c   <configFileName>\tcompute sigma, centroid, w80 for each voronoi bin
    gufo -pV -pa -inCube <pathToCube> -c <configFileName>\tcompute sigma, centroid, w80 for each voronoi bin
    gufo -gPs -bin <binNum>\t-c  <configFileName>\t\tplot fit results for binNum
    gufo -gPs -bin <binNum>\t-c  <configFileName> -dF\tdo fit for binNum with specs from configFile
        """)

    return 

def main (argv):
    '''
    Main function of GaNGiaLF

    Keywords:
        arguments given from terminal, typically a .yml configuration file.

    Help:

    gufo -h
    '''


    for i, arg in enumerate(argv):
        if (arg[0] == '-') and arg[1].isdigit(): argv[i] = ' ' + arg

    parser = ArgumentParser(description='GaNGiaLF: tools for the analysis of radio and optical spectral observations'
                            '|n version {:s} |n install path {:s} |n '
                            'Fil8'.format(__version__,
                                                                               os.path.dirname(__file__)),
                            formatter_class=MultilineFormatter,
                            add_help=False)

    add = parser.add_argument

    add("-h", "--help",  action="store_true",
            help="Print help message and exit")

    add("-v","--version", action='version',
            version='{:s} version {:s}'.format(parser.prog, __version__))

    add("-gd", "--generate_default",
        default=False,
        help='Generate a default configuration file (YAML format)')

    add('-stS', '--starSub',
        action='store_true',
        help= 'make stat subtracted datacube from PPXF output')

    add('-vor', '--vorPlay',
        action='store_true',
        help= 'voronoi binning of line subtracted datacube')

    add('-gp', '--gPlay',
        action='store_true',
        help= 'fit gaussian components for each Voronoi bin')

    add('-gMp', '--gMpPlay',
        action='store_true',
        help= 'multi-process fit gaussian components for each Voronoi bin')

    add('-gPl', '--gPlot',
        action='store_true',
        help= 'loop to plot fit results for each Voronoi bin')

    add('-gPs', '--gPlotSingle',
        action='store_true',
        help= 'plot fit results from a single bin')

    add('-mm', '--moments',
        action='store_true',
        help= 'compute moment maps from fit results of each line')

    add('-mPl', '--momPlot',
        action='store_true',
        help= 'plot moment maps from fit results of each line')
    
    add('-lr', '--lineRatios',
        action='store_true',
        help= 'compute line ratios of OIII/Hbeta, NII/Halpha, SII/Halpha')

    add('-res', '--resPlot',
        action='store_true',
        help= 'compute and plot residuals of fits')

    add('-bptPl', '--bptPlots',
        action='store_true',
        help= 'compute and draw BPT plots')

    add('-bptMp', '--bptMaps',
        action='store_true',
        help= 'tool to draw BPT maps')

    add('-nE', '--electronDensity',
        action='store_true',
        help= 'tool to compute electron density maps from [SII] doublet')

 
    add('-cBl', '--cubelets',
        action='store_true',
        help= 'make cubelets of chosen lines')

    add('-cvG', '--convolveGauss',
        action='store_true',
        help= 'convolve datacube with 2D Gaussian')

    add('-cD', '--cDist',
        action='store_true',
        help= 'compute and plot eta-parameter')

    add('-kA', '--kinAnal',
        action='store_true',
        help= 'compute sigma, w80 and centroid of fitted lines')

    add('-clT', '--clTbl',
        action='store_true',
        help= 'clean fit table from everything except fit results')

    add('-bin', '--binID',
        type = str,
        default=False,
        help= 'bin to plot')

    add('-dF', '--doFit',
        action = 'store_true',
        default=False,
        help= 'fit single bin')

    add('-pV', '--pVsingle',
        action = 'store_true',
        default = False,
        help= 'pvPlot of single cube')

    add('-mS', '--medSub',
        action = 'store_true',
        default = False,
        help= 'subtract median value from spectra in cube')

    add('-sBf', '--selBF',
        action = 'store_true',
        default = False,
        help= 'select Best Fit')

    add('-rT', '--reordTable',
        action = 'store_true',
        default = False,
        help= 'reorder table so g2 is always broadest line')

    add('-mkTb', '--makeTable',
        action = 'store_true',
        default = False,
        help= 'make table from moment maps')

    add('-rbT', '--rebinTable',
        action='store_true',
        help= 'rebin table')

    add('-rbIt', '--rebinInputTable',
        type= str,
        default= False,
        help = 'input table for rebinning')  

    add('-rbCt', '--columnForRebin',
        type= str,
        default= False,
        help = 'columnName for rebinning')

    add('-rbSt', '--binSize',
        type= float,
        default= False,
        help = 'size of binning table')

    add('-rC', '--rebCube',
        action = 'store_true',
        default = False,
        help= 'rebin input cube according to template cube')

    add('-rgC', '--regCube',
        action = 'store_true',
        default = False,
        help= 'regrid cube according to template cube')

    add('-rgM', '--regMom',
        action = 'store_true',
        default = False,
        help= 'regrid moment image according to template image')

    add('-mT', '--momTemp',
        type= str,
        default= False,
        help = 'input image for regrid')

    add('-mI', '--momIn',
        type= str,
        default= False,
        help = 'input image for regrid')  

    add('-cT', '--cubeTemp',
        type= str,
        default= False,
        help = 'template cube for rebinning')    

    add('-cI', '--cubeIn',
        type= str,
        default= False,
        help = 'template cube for rebinning')    

    add('-pa', '--positionAngle',
        type= float,
        default= False,
        help = 'position angle of position-velocity diagram')

    add('-inCube', '--inputCube',
        type= str,
        default= False,
        help = 'path to input datacube')

    add('-mO', '--mosaic',
        action = 'store_true',
        default = False,
        help= 'mosaic datacubes in a directory')

    add('-c', '--cfgFile',
        type=str,
        default=False,
        help='''input .yml file''')

    args, unknown = parser.parse_known_args()

    if args.help and len(argv) ==1 :
        print("\n\t +---------+\t\t    Help\t\t +---------+\n")

        parser.print_help()
        outFunction()

        print ('\n\t*************\t\t--- GuFo End ---\t*************')

        sys.exit(0)

    # Make default file
    # +++++++++++++++++
    if args.generate_default:
        time_start_load = time.time()
        from shutil import copyfile
        configfile = args.generate_default
        print("## Getting parameter file: {}".format(configfile))
        GUFO_PATH =  os.path.dirname((os.path.dirname(os.path.abspath(__file__))))
        #print os.path.abspath(os.path.join(os.pardir))
        copyfile('{}/{}'.format(GUFO_PATH, 'gufo_default.yaml'),
                 configfile)
        print("## !!! edit parameter in your current directory before use !!!".format(time.time() - time_start_load))
        print("## Done ({0:.2f}s)".format(time.time() - time_start_load))

        sys.exit(0)

    #time_start_load = time.time()

    # Load parameter file
    # +++++++++++++++++++
    if args.cfgFile:
        print("\n\t +---------+\t\t  config File\t\t +---------+")
        gPar = gufo.gufo(args.cfgFile)
    elif args.cfgFile is None:
        print ('\n\t************ --- GuFo : ERROR --- ************\n')
        print ('\t... you have not entered a config File or a valid command ...')
        outFunction()
        print ('\n\t************ --- GuFo : DONE  --- ************\n')
        sys.exit(0)

    # Stellar subtracted datacubes
    # ++++++++++++++++++++++++++++
    if args.starSub or gPar.cfg_par['starSub'].get('enable',False) == True:
        time_start_load = time.time()        
        print ('\n\t +---------+\t\t    make Cubes\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        if gPar.cfg_par['starSub'].get('scaleFlux',False) == True:
            ss.makeCubesPix(gPar.cfg_par)
        elif gPar.cfg_par['starSub'].get('scaleFlux',False) == False:
            ss.makeCubesVorBin(gPar.cfg_par)
        timeStar = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeStar))
    
    # Voronoi binning of datacubes
    # ++++++++++++++++++++++++++++
    if args.vorPlay or gPar.cfg_par['vorBin'].get('enable',False) == True:
        time_start_load = time.time()        
        gPar = gufo.gufo(args.cfgFile)
        pretty.prettyOutput_Running('\n\t *********** --- GuFo: VorBin --- ***********\n')
        vor.vorBin(gPar.cfg_par)
        print ('\n\t************ --- GuFo : vorLineCube --- ************\n')
        ss.makeCubesVorLine(gPar.cfg_par)
        print("## fits ... Done ({0:.2f}m)".format((time.time()- time_start_load)))
        print('\n\t************* --- GuFo : DONE --- **************\n')
 
    # Make Pixel Table for Multi-gaussian fit on pixels
    # ++++++++++++++++++++++++++++++++++++++++++++++
    #if gPar.cfg_par['gFit']['method'] == 'pixel' and gPar.cfg_par['gFit'].get('enable',False) == True:
    #    time_start_load = time.time()        
    #    print ('\n\t************* --- GuFo : gPlay --- **************\n')
    #    gPar = gufo.gufo(args.cfgFile)
    #    tP.makePixelTable(gPar.cfg_par)
    #    #gp.gFit(gPar.cfg_par)
    #    print("## fits ... Done ({0:.2f}m)".format((time.time()- time_start_load)))
    #    print('\n\t************* --- GuFo : DONE --- **************\n')

    # Multi-Gaussian Fit 
    # ++++++++++++++++++
    if args.gMpPlay or gPar.cfg_par['general'].get('enableMP',False) == True and gPar.cfg_par['gFit'].get('enable',False) == True or args.gPlay:
        time_start_load = time.time()        
        print ('\n\t +---------+\t\t    Fitting\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        gPlayMp.main(gPar.cfg_par)
        timeFit = (time.time()- time_start_load)/60.
        print('\n\t  +---------+\t\t  Done ({0:.2f}m)\t\t+---------+'.format(timeFit))

    # Plot all fits 
    # ++++++++++++++
    if args.gPlot or gPar.cfg_par['gPlot'].get('enable',False) == True and gPar.cfg_par['gFit'].get('enable',False) == False:
        time_start_load = time.time()
        print ('\n\t************ --- GuFo : gPlot --- ************\n')
        gPar = gufo.gufo(args.cfgFile)
        gp.gPlot(gPar.cfg_par)
        print("## plot fits ... Done ({0:.2f}s)".format((time.time()- time_start_load)))
        print('\n\t  ************ --- GuFo : DONE --- ***********\n')

    # Plot single fit or re-do fit for single bin and plot
    # +++++++++++++++++++++++++++++++++++++++++++++++++++++
    if args.gPlotSingle:
        time_start_load = time.time()
        gPar = gufo.gufo(args.cfgFile)
        gPar.cfg_par['general']['cleanTable'] = False
        gPar.cfg_par['starSub']['enable'] = False
        gPar.cfg_par['vorBin']['enable'] = False
        gPar.cfg_par['gFit']['enable'] = False
        gPar.cfg_par['lineRatios']['enable'] = False
        gPar.cfg_par['moments']['enable']
        if args.doFit:
            print('\n\t +---------+\t\t fit single bin\t +---------+')
            doFit=True
        else:
            print('\n\t +---------+\t\t plot single bin\t +---------+')
            doFit=False
        gp.plotSingleBin(gPar.cfg_par, args.binID,doFit=doFit)
        timeSpec = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeSpec))

    # Compute residuals
    # +++++++++++++++++
    if args.resPlot or gPar.cfg_par['residuals'].get('enable',False) == True:
        time_start_load = time.time()
        gPar = gufo.gufo(args.cfgFile)
        if gPar.cfg_par['residuals'].get('fromTable',False) == True:
            print ('\n\t +---------+\t\t  plot residuals\t +---------+')
            mom.resLinesFromTable(gPar.cfg_par)
            timeRes = (time.time()- time_start_load)/60.
            print('\n\t  +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeRes))
            sys.exit(0)
        print ('\n\t +---------+\t\t   residuals\t\t +---------+')
        mom.resLines(gPar.cfg_par)
        timeRes = (time.time()- time_start_load)/60.
        print('\n\t  +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeRes))

    # Compute moment Maps
    # +++++++++++++++++++
    if args.moments or gPar.cfg_par['moments'].get('enable',False) == True:
        time_start_load = time.time()
        print('\n\t +---------+\t\t    moments\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        #gPar.cfg_par['general']['cleanTable'] = True
        #tP.cleanTable(gPar.cfg_par)        
        mom.makeMoments(gPar.cfg_par)
        #gPar.cfg_par['general']['cleanTable'] = False
        timeMom = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeMom))

    # Plot moment Maps
    # ++++++++++++++++
    if args.momPlot or gPar.cfg_par['moments'].get('plot',False) == True:  
        time_start_load = time.time()
        print('\n\t +---------+\t\t   moments Plot\t\t+---------+')
        gPar = gufo.gufo(args.cfgFile)
        #gPar.cfg_par['general']['cleanTable'] = True
        mom.makeMomPlots(gPar.cfg_par)
        #gPar.cfg_par['general']['cleanTable'] = False
        timeMom = (time.time()- time_start_load)/60.
        print('\n\t ************ --- GuFo : DONE --- ************\n'.format(timeMom))


    # Regrid Moment Map
    # +++++++++++++++++
    if args.regMom or gPar.cfg_par['moments']['regrid'].get('enable',False) == True: 
        time_start_load = time.time()
        print('\n\t +---------+\t\t  regrid MoM\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        mom.regridMoms(args.momTemp,args.momIn)
        timeMS = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeMS)) 

    # Select BestFit solutions within multiple ouput tables
    # +++++++++++++++++++++++++++++++++++++++++++++++++++++
    if args.selBF  or gPar.cfg_par['bestFitSel'].get('enable',False) == True:
        time_start_bf = time.time()                
        print ('\n\t************ --- GuFo : select Best Fit --- ************\n')
        gPar = gufo.gufo(args.cfgFile)
        tP.selectBestFit(gPar.cfg_par)
        timeBF = (time.time()- time_start_bf)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeBF))

    # Make cube of BestFit solutions
    # ++++++++++++++++++++++++++++++    
    if gPar.cfg_par['bestFitSel']['BFcube'].get('enable',False) == True:
        time_start_load = time.time()
        print('\n\t +---------+\t\t    BF cube\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        cP.makeBFLineCube(gPar.cfg_par)
        timeMom = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeMom))  

    # Compute residuals of BestFit solutions
    # ++++++++++++++++++++++++++++++++++++++
    if gPar.cfg_par['residuals'].get('BFcube',False) == True:
        time_start_load = time.time()
        print('\n\t +---------+\t\t    BF cube\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        mom.resCube(gPar.cfg_par)
        timeMom = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeMom))   

    # Create cubelets around fitted lines
    # +++++++++++++++++++++++++++++++++++  
    if args.cubelets or gPar.cfg_par['cubePlay']['cubelets'].get('enable',False) == True:
        time_start_load = time.time()
        print('\n\t +---------+\t\t    cubelets\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        #gPar.cfg_par['general']['cleanTable'] = True
        #tP.cleanTable(gPar.cfg_par)  
        if gPar.cfg_par['cubePlay']['cubelets']['cube']=='all':
            gPar.cfg_par['cubePlay']['cubelets']['cubes'] = 'vorLine'
            cP.makeLineCubes(gPar.cfg_par)
            gPar.cfg_par['cubePlay']['cubelets']['cube'] = 'residuals'
            cP.makeLineCubes(gPar.cfg_par)
            gPar.cfg_par['cubePlay']['cubelets']['cube'] = 'fitLine'
            cP.makeLineCubes(gPar.cfg_par)
            gPar.cfg_par['cubePlay']['cubelets']['cube'] = 'cubes'
            cP.makeLineCubes(gPar.cfg_par)
        else:
            cP.makeLineCubes(gPar.cfg_par)            
        #gPar.cfg_par['general']['cleanTable'] = False
        timeMom = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeMom))

    # Rebin Datacube
    # ++++++++++++++ 
    if args.rebCube or gPar.cfg_par['cubePlay']['rebinCube'].get('enable',False) == True: 
        time_start_load = time.time()
        print('\n\t +---------+\t\t  rebin Cube\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        cP.rebinCube(args.cubeTemp,args.cubeIn)
        timeMS = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeMS)) 

    # PV-Diagram
    # ++++++++++
    if args.pVsingle or gPar.cfg_par['cubePlay']['pvDiagram'].get('enable',False) == True: 
        time_start_load = time.time()
        print('\n\t +---------+\t\t    pV diagram\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        gPar.cfg_par['cubePlay']['cubelets']['pa'] = args.positionAngle
        if args.inputCube:
            gPar.cfg_par['cubePlay']['cubelets']['inCube'] = args.inputCube
        cP.pvDiagram(gPar.cfg_par)
        timePV = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timePV))

   
    # Regrid cube with Montage: !!! does not work except headers are perfect !!!!
    # +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    if args.regCube: 
        time_start_load = time.time()
        print('\n\t +---------+\t\t  regrid Cube\t\t+---------+')
        gPar = gufo.gufo(args.cfgFile)
        cP.regridCube(gPar,args.cubeTemp,args.cubeIn)
        timeMS = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeMS))   
   
    # Subtract median value from each spectra of datacube
    # +++++++++++++++++++++++++++++++++++++++++++++++++++
    if args.medSub or gPar.cfg_par['cubePlay']['medSub'].get('enable',False) == True: 
        time_start_load = time.time()
        print('\n\t +---------+\t\t  median Sub\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        cP.medianSubtract(gPar.cfg_par)
        timeMS = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timeMS))

    # Mosaic cubes with Montage
    # +++++++++++++++++++++++++
    if args.mosaic or gPar.cfg_par['cubePlay']['mosaic'].get('enable',False) == True: 
        time_start_load = time.time()
        print('\n\t +---------+\t\t  mosaic Cubes\t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        mosaicCubes.mosaicCubes(gPar.cfg_par)
        timePV = (time.time()- time_start_load)/60.
        print('\n\t +---------+\t\t  Done ({0:.2f}m)\t\t +---------+'.format(timePV))

    # Analysis of the kinematics
    # ++++++++++++++++++++++++++        
    if args.kinAnal or gPar.cfg_par['kinematicalAnalysis']['ancillaryInfo']['CCAanalysis'] == True:
        time_start_load = time.time()
        print ('\n\t +---------+\t      kinematical Analysis\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        print('\n\t         +++\t          CCA & Rotation\t +++')
        aPl.inCCARegionTable(gPar.cfg_par)
        aPl.sigmaCentroid(gPar.cfg_par)
        timeAnc = (time.time()- time_start_load)/60.
        print('\n\t  +---------+\t\tDone ({0:.2f}m)\t\t+---------+'.format(timeAnc))


    if gPar.cfg_par['multipleRegions']['enable'] == True:
        time_start_load = time.time()
        print ('\n\t +---------+\t      kinematical Analysis\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        print('\n\t         +++\t          K-Plot Multiple\t +++')
        #aPl.inCCARegionTable(gPar.cfg_par)
        aPl.sigmaCentroidMultiple(gPar.cfg_par)
        timeAnc = (time.time()- time_start_load)/60.
        print('\n\t  +---------+\t\tDone ({0:.2f}m)\t\t+---------+'.format(timeAnc))

    if gPar.cfg_par['multipleRegions']['enable'] == True:
        time_start_load = time.time()
        print ('\n\t +---------+\t      kinematical Analysis\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        print('\n\t         +++\t          K-Plot Multiple\t +++')
        #aPl.inCCARegionTable(gPar.cfg_par)
        mom.makeMultipleMaps(gPar.cfg_par)
        mPl.momAncPlotMultiple(gPar.cfg_par)
        timeAnc = (time.time()- time_start_load)/60.
        print('\n\t  +---------+\t\tDone ({0:.2f}m)\t\t+---------+'.format(timeAnc))


    # Sigma and Centroid Maps
    # ++++++++++++++++++++++++++        
    if args.kinAnal or gPar.cfg_par['kinematicalAnalysis']['sigmaCentroid'] == True:
        time_start_load = time.time()
        print ('\n\t +---------+\t      kinematical Analysis\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        print('\n\t         +++\t\tsigma & centroid\t +++')
        if gPar.cfg_par['kinematicalAnalysis']['compute']==True:
            ancels.main(gPar.cfg_par)
        print('\n\t         +++\t\t plotting maps\t\t +++')
        mom.makeSigmaCentroidMaps(gPar.cfg_par)
        timeAnc = (time.time()- time_start_load)/60.
        print('\n\t  +---------+\t\tDone ({0:.2f}m)\t\t+---------+'.format(timeAnc))

    # Cold gas kinematical analysis
    # +++++++++++++++++++++++++++++          
    if gPar.cfg_par['otherGasKinAnalysis'].get('enable',False) == True:
        time_start_load = time.time()
        print ('\n\t +---------+\t\t gas Kinematics \t\t +---------+')
        gPar = gufo.gufo(args.cfgFile)
        if gPar.cfg_par['otherGasKinAnalysis']['rotID'].get('enable',False) == True:
            cP.selectRotation(gPar.cfg_par)
        #sys.exit(0)
        aPl.inCCARegionTable(gPar.cfg_par)
        aPl.sigmaCentroidColdGas(gPar.cfg_par)
        timeAnc = (time.time()- time_start_load)/60.
        print('\n\t  +---------+\t\tDone ({0:.2f}m)\t\t+---------+'.format(timeAnc))

    # Line ratios
    # +++++++++++
    if args.lineRatios or gPar.cfg_par['lineRatios'].get('enable',False) == True:        
        print('\n\t************ --- GuFo : lineRatios --- ************\n')
        gPar = gufo.gufo(args.cfgFile)
        #gPar.cfg_par['general']['cleanTable'] = True
        #tP.cleanTable(gPar.cfg_par)   
        #gPar.cfg_par['general']['cleanTable'] = False
        lineInfo = tP.openLineList(gPar.cfg_par)
        tP.binLineRatio(gPar.cfg_par,lineInfo)
        mom.makeLineRatioMaps(gPar.cfg_par)
        print('\n\t  ************ --- GuFo : DONE --- ************\n')    

    # Electron Density
    # ++++++++++++++++
    if args.electronDensity or gPar.cfg_par['lineRatios'].get('electronDensity',False) == True:        
        print('\n\t************ --- GuFo : electron Density --- ************\n')
        gPar = gufo.gufo(args.cfgFile)
        #gPar.cfg_par['general']['cleanTable'] = True
        #tP.cleanTable(gPar.cfg_par)   
        #gPar.cfg_par['general']['cleanTable'] = False
        tP.electronDensityTable(gPar.cfg_par)
        lP.electronDensityMap(gPar.cfg_par)
        print('\n\t  ************ --- GuFo : DONE --- ************\n')    



    # BPT plots
    # +++++++++  
    if args.bptPlots or gPar.cfg_par['lineRatios'].get('bptPlot',False) == True:    
        print ('\n\t************* --- GuFo : BPT plots --- **************\n')
        gPar.cfg_par['lineRatios'].get('bptMap',False) == True
        #gPar.cfg_par['general']['cleanTable'] = True
        bpt.bptOIII(gPar.cfg_par)
        #bpt.bptSII(gPar.cfg_par)
        #bpt.bptOI(gPar.cfg_par)
        #gPar.cfg_par['general']['cleanTable'] = False
        print('\n\t  ************ --- GuFo : DONE --- ************\n')

    # BPT maps
    # ++++++++
    if args.bptMaps or gPar.cfg_par['lineRatios'].get('bptMap',False) == True:    
        print ('\n\t************ --- GuFo : BPT maps --- ************\n')
        print(gPar.cfg_par['general']['bptDir']+gPar.cfg_par['gFit']['modName'])
        #gPar.cfg_par['general']['cleanTable'] = True
        outBPT = glob.glob(gPar.cfg_par['general']['bptDir']+gPar.cfg_par['gFit']['modName']+"/*.fits")
        for i in outBPT:
            bpt.bptIM(gPar.cfg_par,i)
        #gPar.cfg_par['general']['cleanTable'] = False

        print('\n\t  ************ --- GuFo : DONE --- ************\n')

    # Carollo-distance and plot and maps
    # ++++++++++++++++++++++++++++++++++
    if args.cDist or gPar.cfg_par['lineRatios'].get('cDist',False) == True:    
        print ('\n\t************ --- GuFo : Carollo Distance --- ************\n')
        gPar = gufo.gufo(args.cfgFile)
        tP.carolloDistOIII(gPar.cfg_par)
        mom.momCDist(gPar.cfg_par)
        print('\n\t      ************ --- GuFo : cDistBPT --- ************\n')
        bpt.bptCDist(gPar.cfg_par)
        print('\n\t      ************ --- GuFo : DONE --- ************\n')

    # Modify output table
    # +++++++++++++++++++
    if args.clTbl or gPar.cfg_par['general'].get('cleanTable',False) == True:
        print ('\n\t************ --- GuFo : clean Table --- ************\n')
        gPar = gufo.gufo(args.cfgFile)
        tP.cleanTable(gPar.cfg_par)
        print('\n\t************ --- GuFo : DONE --- ************\n') 

    if args.reordTable :
        print ('\n\t************ --- GuFo : reorder Table --- ************\n')
        gPar = gufo.gufo(args.cfgFile)
        tP.reordTable(gPar.cfg_par)
        print('\n\t************ --- GuFo : DONE --- ************\n') 

    if args.rebinTable :
        print ('\n\t************ --- GuFo : rebin Table --- ************\n')
        inTable=args.rebinInputTable
        columnBin=args.columnForRebin
        binSize=args.binSize
        tP.rebinTable(inTable,columnBin,binSize)
        print('\n\t************ --- GuFo : DONE --- ************\n') 

    if args.makeTable or gPar.cfg_par['moments']['makeTable'].get('enable',False) == True:
        print ('\n\t************ --- GuFo : make Table --- ************\n')
        gPar = gufo.gufo(args.cfgFile)
        tP.fromMomsToTable(gPar.cfg_par)
        print('\n\t************ --- GuFo : DONE --- ************\n') 




print ('\n\t*************\t\t---   GuFo   ---\t*************')

main([a for a in sys.argv[1:]])

print ('\n\t*************\t\t--- GuFo End ---\t*************')



